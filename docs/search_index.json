[["index.html", "Dockerによる環境構築 このサイトについて", " Dockerによる環境構築 Juan Martínez 2021-11-18 このサイトについて これは経済セミナー１２・１月号の「dockerによる環境構築」のサポートページであり、スペースの関係で含められなかった情報やDockerの利用をより理解しやすくする情報が含まれている。 このサイトの内容は実証研究におけるDockerの使い方に関する情報に限る。オンラインのドキュメントがとても充実しているため、より詳しい情報が必要な場合 公式ガイドを参考してください。 "],["dockerを使い始めるには.html", "セクション 1 Dockerを使い始めるには 1.1 インストール 1.2 オンラインでの利用", " セクション 1 Dockerを使い始めるには Dockerは、Windows、MacOS、Linuxで動作するコンピュータで使用することができる。このセクションでは、Dockerの操作を学ぶための環境を構築、又はアクセス、するほうほうを紹介する。 1.1 インストール 自分のパソコンにDockerをインストールの手順は Dockerの公式サイトで見つけることができる。 WindowsとMacOSの場合はDocker Desktopをインストールすることで全ての必要なツールだけではなく、便利なグラフィカル・ユーザー・インターフェース（GUI）もインストールできる。未経験のユーザーはこの方法は一番簡単だ。 Docker DesktopのGUIでは、コマンドライン・インターフェース（CLI）を使わなくても、Docker Imageの管理、新しいコンテナの起動、ログの確認などができる。 高度な操作がサポートされない場合があるためCLIの使い方に慣れると良いが、学習のために使うならまずGUIから学ぶと無駄に苦しまないで学習できる。 1.2 オンラインでの利用 学んでみたいが今インストールする暇がないと思う人はPlay With Dockerを使うことができる。Play With DockerはDocker社が提供するサンドボックスのクラウド環境である。Linux環境でDockerの様々なツールが既にインストールされているため、起動するだけですぐに練習できる。 使える環境のリソース（容量、メモリー、プロセッサー）はとても限定的だから思い処理には使えないが簡単なコンテナの立ち上げや小さいImageのビルドなら十分である。Play With Dockerをアクセスするには無料のDockerアカウントが必要である。 "],["docker-volumes.html", "セクション 2 Docker Volumes", " セクション 2 Docker Volumes Docker containerの中で作成されるファイルはコンテナ破棄の時に削除される。論文執筆や発表の準備の時はまとめた結果を保存したい場合がある。コンテナの中で作成された一部のファイルを、コンテナ外の環境とつながっているフォルダーに保存できればコンテナを破棄してもそのファイルが残って便利だろう。このセクションではその「外と繋がったフォルダー」の作り方を紹介する。 自分のパソコンに次のようなフォルダー構造があった場合を考えてみよう： .  my-project   Dockerfile   analyze_data.py   clean_datga.py  results  figure_1.png 自分の/home/フォルダーに my-projectとresultsという二つのフォルダーがある。Dockerfileはmy-projectの中にあるため、そのフォルダーの中からdocker build --tag my-research-imageを実行しても resultsの内容がDocker Imageの中にコピーされない。コンテナの中で得られたデータ分析の結果をresultsに保存したい場合はそのフォルダーとコンテナの中のフォルダーとの橋を作る必要がある。その時はdocker runの-vオプションが使われる。この例では： docker run -v /home/results:/home/rstudio/results my-research-image というようなコマンドを使えばDocker volumeを作成することができる。この例ではそのvolumeはコンテナの外の/home/resultsというフォルダーをコンテナの中にある/home/rstudio/resultsと繋いでいる。パソコンの /home/resultsフォルダーに保存されたファイルはコンテナの中の/home/rstudio/resultsからアクセスできて、逆にコンテナの中でそのロケーションに置かれるファイルは自分のパソコンの/home/resultsというフォルダーからアクセスできる。コンテナが破棄されてもvolumeのファイルは削除されない。 Docker volumesの使い方が複数あるためvolumesの 公式ガイドを確認しましょう。 "],["docker-compose.html", "セクション 3 Docker Compose", " セクション 3 Docker Compose Docker Composeは複数コンテナで構成される作業環境の管理を可能にするツールである。また、作業環境の設定を1つのファイルにまとめたい時にも使われる。このセクションではデータ分析のためのDocker Composeの使い方を紹介する。より詳しい情報が必要な場合は 公式ガイドを確認してください。 まず、Docker ComposeはDockerのコマンドラインインターフェースと違うツールだから、Dockerが用意されているパソコンならDocker Composもインストールされているとは限らない。ただ、Docker Desktop for Windows又はMacOSでDockerをインストールした場合Composeも一緒に付いてくる。 下記のフォルダー構造の場合で考えてみよう： .  data_analysis   Dockerfile   analyze_data.py  data_processing   Dockerfile   process_data.py  docker-compose.yaml データクリーニングやデータ分析はそれぞれ独立したタスクであるため、それぞれのDocker ImageやそのDockerfileがある。必要な設定（volume、環境変数、portsなど）も異なる。 両方のコンテナの設定はdocker-compose.yamlというファイルにまとめられている。その内容は： version: &quot;3&quot; services: data_processing: build: context: . dockerfile: ./data_processing/Dockerfile volumes: - /home/users/me/data/:/data/ data_analysis: build: context: . dockerfile: ./data_analysis/Dockerfile ports: - 8787:8787 environment: - NUM_CORES: ${MY_NUM_CORES} volumes: - /home/users/me/data/:/data/ このファイルでは二つのサービスがていぎされている：data_processingとdata_analysis。それぞれのサービスの定義の中には build, ports, volumes, environmentといったサブセクションがあり、その中で必要なDockerfileへのパス、volumeの設定、アクセスに必要なポート、コンテナの中のプログラムがアクセスしてほしい環境変数を定義している。このような設定は docker runでコンテナを立ち上げる時にも使えるがすべてをそのコマンドで設定しようとすればこまんどが長くなることで、必要なオプションを使うのを忘れたり、書き間違えたりすることがある。Docker Composeを使えばコンテナの起動はより簡単になる。 例えば、data_analysisというサービスのみを立ち上げたいときは docker-compose up data_analysisを実行する。作業が終わって、サービスを停止したい場合は docker-compose stop data_analysisで簡単にできる。docker-compose downを使えば全てのこのdocker-compose.yamlファイルで定義されているサービスが破棄される。 単純にdocker-compose upを実行すると全ての定義されたサービスが同時に立ち上がる。このセクションで使っている例ではあまりやる意味がない（データクリーニングやデータ分析を同時に行うことは中々ないはずだ）が、そうしたい場合もある。例えば、テキストデータや地理情報を分析しているとき、そのデータ構造に適切なデータベースを用意することでデータ分析がより円滑に行える場合、データ分析の作業環境とともにそのデータベースも立ち上げる必要がある。データベースをサービスとしてdocker-compose.yamlに定義することでそのワークフローが可能になる。 "],["練習問題.html", "セクション 4 練習問題 4.1 Hello World 4.2 Building a Simple Image 4.3 Start an RStudio Session on a Container 4.4 RStudio with a Volume to Store your Work 4.5 Publishing on Docker Hub", " セクション 4 練習問題 初めて使う人にとってはDockerは威圧に見えるが慣れるとその使い方はとても直観的で癖になる。そのため、小さな練習問題を解くことが効果的である。このセクションでは簡単な練習問題を解きながらDockerの基本を復習できる。Dockerがインストールされている環境を用意するひつようがあるから、用意していない場合はインストール Dockerを使い始めるにはを参考してください。 4.1 Hello World この練習問題では公式の hello-world Docker Imageを使って、コンテナを立ち上げる。コンテナが起動したらメッセージを画面にプリントして自動的に停止する。 docker runを使ってhello-world Imageからコンテナを立ち上げてみよう： 回答はこちら docker run hello-world コンテナがメインコマンドを実行して自動的に停止したがコンテナがまだ破棄されていない。コンテナのステータスはExitedになっているはずだ。docker ps --allを実行することで全てのコンテナのステータスを確認することができる。立ち上げた時にコンテナに名前を付与しなかったからDockerがランダムに名前を付けてくれた。その名前もdocker ps --allコマンドでかくにんできる。執筆の時点で自分がコンテナを立ち上げたとき、gallant_archimedesという名前が付けられた。 要らないコンテナは邪魔するから、 docker rmとDockerが付与してくれたコンテナの名前を使って破棄してみよう： 回答はこちら docker rm gallant_archimedes もう一度hello-worldからコンテナを立ち上げてみよう。今回はmy-containerという名前を付けてみよう： 回答はこちら docker run --name my-container hello-world コンテナが停止したらdocker ps --allを使って、my-containerというコンテナがあることを確認できる。 確認できたらdocker rm my-containerを使って破棄してください。 毎回破棄するなら停止するときに自動的に破棄されるようにしたほうが効率がいい。もう一度コンテナを立ち上げてみよう。今回は rmオプションを使ってください。確認しやすくするために、my-containerという名前を付けておこう。 回答はこちら docker run --name my-container --rm hello-world コンテナが停止したらdocker ps --allを使って、my-containerというコンテナがないことをかくにんしてみてください。コンテナが破棄されたなら見つからないはずだ。 全部上手くいったか？お疲れ様！  4.2 Building a Simple Image Dockerfileを使ってDocker Imageをビルドてみよう。 まずフォルダーを作成し、その中でDockerfileというファイルを作成しよう。そのファイルの内容は下記にしておこう： FROM rancher/cowsay このファイルから作成されるDocker Imageは cowsayの公式イメージをベースにしている。 cowsayはコマンドラインの使い方を学ぶためによく使われるLinuxのプログラムである。この練習問題では牛を喋らせる ようにDockerfileを編集していく。 同じフォルダーからdocker buildを使ってDocker Imageをビルドしよう。イメージの名前をmy-cow:v1にしよう。 回答はこちら docker build --tag my-cow:v1 . 初めてrancher/cowsayイメージを使う場合はDocker Hubからダウンロードされる。ビルドが無事に終わったらdocker imagesというコマンドを実行して、レポジトリ名 my-cow、tag v1というイメージがあることを確認しよう。 そのイメージからコンテナを立ち上げてください： docker run --rm my-cow:v1 moo 下記のような牛が表示されるはず。 _____ &lt; moo &gt; ----- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || 実行したコマンドにあるmooはDocker ImageのEntrypoint（入口）に渡される引数である。そのEntrypointはDockerfileで設定できる。 cowsayというプログラムの使い方は、例で説明すると、 cowsay &quot;hello world&quot;を実行したら、牛が hello worldという。つまり、hello worldはcowsayに渡される引数。先ほど作ったイメージのEntrypointは cowsayというコマンドなので、docker runコマンドのDocker Imageの次にmooと書いて実行すると、それはコンテナの中でcowsay mooを実行するのと同じである。 ベースのDocker ImageのEntrypointを上書きするために、自分の作成したDockerfileに定義する必要がある。 先ほど作成したDockerfileを編集して、牛がデフォルトで経済セミナーはすごい！と言う ように使用。 回答はこちら FROM rancher/cowsay ENTRYPOINT cowsay &quot;経済セミナーはすごい！&quot; my-cow:v2と名付けしてイメージをビルドしよう。 回答はこちら docker build --tag my-cow:v2 . では、コンテナを立ち上げてみよう： docker run --rm my-cow:v2 Dockerfileが正しければ次の牛が表示される： ___________________________________ &lt; 経済セミナーはすごい！ &gt; ----------------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || いいメッセージだと思うけど、毎回実行するたびに同じメッセージが表示されるのがつまらないかもしれない。 ファイルに複数のメッセージを書き込んで、そこから牛がランダムにえらぶようにしてみよう！ まずdadjokesというファイルを作成しよう、内容は： マイケル・ジョーダンの冗談はまぁいける冗談 そのメロン、食べるのやめろん 朝食食べて超ショック！ 車が来るまで待とう パジャマを着ているパパ、邪魔だ ライスだけでは、辛いっす！ 係長になるまで、まだまだ時間がかかりちょー 下手なシャレは、辞めなしゃれ ソーダは美味しそーだ 都会から来たって、「ホントかい？」 このサイトからとてもレベルの高いおやじギャグを選んでみた。 Dockerfileを、dadjokesファイルをイメージの中に追加するように編集してみてください。 回答はこちら FROM rancher/cowsay ADD ./dadjokes dadjokes ENTRYPOINT cowsay &quot;経済セミナーはすごい！&quot; ADDコマンドはDockerfileと同じフォルダーにあるdadjokesというファイルをコピーして、イメージの中に dadjokesという名前で保存する。 こうするとファイルがイメージの中に保存される。では、ファイルからランダムに１行がランダムに選択されて、その内容をcowsayに渡されるようにしてこう。Entrypointを下記のように書き換えよう： ENTRYPOINT shuf -n 1 dadjokes | cowsay 簡単にコマンドを解釈すると、shuf -n 1 dadjokesは dadjokesファイルからランダムに１行を選択する。|はその結果を次のコマンド（この場合はcowsay）に渡す。 つまり、Dockerfileは下記のようになる： FROM rancher/cowsay ADD ./dadjokes dadjokes ENTRYPOINT shuf -n 1 dadjokes | cowsay my-cow:v3と名付けしてイメージをビルドしよ： docker build --tag my-cow:v3 . では、コンテナを立ち上げてみよう： docker run --rm my-cow:v3 全てが正しければ次のような牛が表示される： ___________________________________ &lt; 朝食食べて超ショック！ &gt; ----------------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || これでDockerfileの書き方の基本を練習できた。Dockerfileの 公式ガイドはとても充実しているので、より詳しく知りたい人は参考にしてください。  4.3 Start an RStudio Session on a Container Use Rocker on your computer and access it from the web browser 4.4 RStudio with a Volume to Store your Work Same as the previous exercise, but let’s link an existing directory to a location within the container to keep the stored data. 4.5 Publishing on Docker Hub Create a Docker Hub account and publish your first image "],["セキュリティ.html", "セクション 5 セキュリティ 5.1 Managing Data 5.2 Using External Docker Images", " セクション 5 セキュリティ Docker is a very convenient and powerful tool, but as any software out there you must use it with care. In this section I discuss some topics you should always have in mind when using Docker on your research. 5.1 Managing Data Docker images are files. Consequently, when you share a Docker image or upload it to a public repository such as Docker Hub, you must have in mind that you are sharing data. There’s always some data that you don’t want to share, whether because it’s sensitive (license keys, credentials, etc.), or because the terms of usage of the data do not allow it. Here are some tips that can help you avoid unwanted data leaks. For example, consider the following directory structure:  .env  Dockerfile  code   estimation.R   read_data.R  data  survey_2011.csv  survey_2012.csv  survey_2013.csv If you run docker build . in this directory, the csv files within the data directory may be copied into the resulting docker image if the ADD directive is used in the Dockerfile. If you share that image with someone else, they would have access to the data. Also the .env file may contain license keys and other credentials which you do not want to share. You have a few options to avoid unexpected data leaks: 5.1.1 Use a .dockerignore file Just like .gitignore files let you define files and directories that should not be subject of version controll by git, .dockerignore files let you specify files which should not be included inside docker images when using the ADD directive. Just include a .dockerignore file in the same directory as the Dockerfile. Its contents should include the path to the files you want to exclude. The format of the file is similar to that of .gitignore files. 5.1.2 Use volumes The file structure in the previous example is inconvenient. Not just because there’s the risk of including unwanted data in a docker image, but also because you run the risk of committing those files to your version control system, such as git. It is a better idea to put the contents of the data directory in a secured database. But if you must keep the files in your hard disk for whatever reason, you should place them in a location outside the project’s folder and make them available to the code within the container using docker volumes. 5.2 Using External Docker Images Docker containers are extremely safe by default. However, it is always a good idea to prefer using verified images when you download them from Docker Hub, and to always check the content of the Dockerfiles you use to build images on your computer. You can read about the security of Docker containers here. "],["research-examples.html", "セクション 6 Research Examples", " セクション 6 Research Examples Here are some examples of empirical research in Economics that use Docker for reproducibility or to share code libraries. "],["有料ソフトの利用.html", "セクション 7 有料ソフトの利用 7.1 Matlab 7.2 ArcGIS Notebook Server 7.3 Stata", " セクション 7 有料ソフトの利用 これまで使ってきた例では、オープンソースのコードとデータしか含まれていない。しかし、多くの研究者は、StataやMatlabなど、限定的なライセンスの有料ソフトウェアを使用している。 厳密にいえば、これらのソフトウェアをDockerで使用することが可能だが、その利用方法がそれぞれのライセンスにしたがわなければならない。公式のDocker Imageが提供される場合はプロバイダーの指示に従って利用できる。そうでない場合はDockerでの使い方がライセンス的に許されるかを先に確認するべきである。このセクションでは、よく使われる有料の統計ソフトのDockerでの使用例を紹介する。 7.1 Matlab Docker上でMatlabを利用する場合公式のDocker Imageを使うことができる。詳しくは 公式レポジトリを確認してほしい。 7.2 ArcGIS Notebook Server ArcGISを用いたノートブック環境で地理情報の分析をDocker上で行うことができる。 公式サイトの指示に従って利用してください。 7.3 Stata 知っている限りはStataの公式Docker Image、又はDocker上での利用に関する公式ガイドが存在しない。 American Economic ReviewのData Editorの GitHubアカウントでDockerでStataの利用を可能にするDocker Imageが公開されている。Docker Hubの dataeditorsレポジトリでも見つけることができる。当該ライセンスの内容を確認してから利用するとよい。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
